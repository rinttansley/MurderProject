Postgres Database Setup

CREATE TABLE murderStats1st (
	RecordID bigserial,
	AgencyCode varchar(25),
	AgencyName varchar(50),
	AgencyType varchar(50),
	City varchar(50),
	State varchar(50),
	Year date,
	Month varchar(50),
	Incident int,
	CrimeType varchar(75),
	CrimeSolved varchar(50),
	VictimSex varchar(50),
	VictimAge int,
	VictimRace varchar(75),
	VictimEthnicity varchar(50),
	PerpetratorSex varchar(50),
	PerpetratorAge int,
	PerpetratorRace varchar(75),
	PerpetratorEthnicity varchar(50),
	Relationship varchar(50),
	Weapon	varchar(75),
	VictimCount int,
	PerpetratorCount int,
	RecordSource varchar(50)
	);
  
  
  
    
  
  CREATE TABLE murderStats2nd (
	RecordID bigserial,
	AgencyCode varchar(25),
	AgencyName varchar(50),
	AgencyType varchar(50),
	City varchar(50),
	State varchar(50),
	Year date,
	Month varchar(50),
	Incident int,
	CrimeType varchar(75),
	CrimeSolved varchar(50),
	VictimSex varchar(50),
	VictimAge int,
	VictimRace varchar(75),
	VictimEthnicity varchar(50),
	PerpetratorSex varchar(50),
	PerpetratorAge int,
	PerpetratorRace varchar(75),
	PerpetratorEthnicity varchar(50),
	Relationship varchar(50),
	Weapon	varchar(75),
	VictimCount int,
	PerpetratorCount int,
	RecordSource varchar(50)
	);
  
  --- Split up information from the murder stats into two to practice joining
  
  ###
ALTER TABLE murderstats
ALTER COLUMN year TYPE text;
##
ALTER TABLE murderstats
ALTER COLUMN year TYPE int USING year::integer;
##
ALTER TABLE murderstats
ALTER COLUMN agencytype TYPE varchar (200);
##
ALTER TABLE murderstats
ALTER COLUMN agencyname TYPE varchar (200);


---Notes---

~~ Order of operations for PGAdmin
Punctuation - quoates, parenteses, math operators
Numbers
Punctuation - ? and additional
Capital Letters
Punctuation - brackets, underscore
Lowercase letters
Punctuation - special characters, extended alphabet

~~ Operators
=
<> !=
>
<
>=
<=
BETWEEN
IS
LIKE - pattern (case sensitive)
ILIKE - pattern (not case sensitive)
NOT

**Probably want to create some statements utilizing at least the last 4/5 to show knowledge and ability to use

~~ Math Operators
+
-
*
/
% - Modulo (returns just the remainder)
^
|/ - Square Root
||/ - Cube Root
| - Factorial

~~ Good practice to avoid calling files .csv if the coma is not the separator/delimiter

--- // ---
Use snake_case
Use easy to understand and not abbreviated names
For table names, use plurals
Mind the length (SQL standard is 128 char, Postgres is 63, Orgacle is 30)
When making copies, use names that will help you manage them later (parsing), name_name_2021_10_20 - will also help files be sorted on date


--- Commands ---
#Selects all information from the table murderstats2nd
SELECT * FROM murderstats2nd;

#Selects only the columns state, year, crimetype and crimesolved from table murderstats2nd
SELECT state, year, crimetype, crimesolved FROM murderstats2nd;

#Selects the state, crime type and crimesolved columns from a specific table and orders state by descending order and vrimesolved by ascending order
SELECT state, crimetype, crimesolved
FROM murderstats1st
ORDER BY state DESC, crimesolved ASC;

#Selects the perpetrator sex, perpetratorrace and relationshup from a specific table where a specific critera for state is met
SELECT perpetratorsex, perpetratorrace, relationship
FROM murderstats1st
WHERE state = 'Wyoming';

#Selects a few variables from a specific table and uses the LIKE operator to search for states that contain certain criteria 
SELECT perpetratorsex, perpetratorrace, relationship, state
FROM murderstats1st
WHERE state LIKE 'M%'

SELECT perpetratorsex, perpetratorrace, relationship, state
FROM murderstats1st
WHERE state LIKE '%nt%'

SELECT perpetratorsex, perpetratorrace, relationship, state
FROM murderstats1st
WHERE state LIKE '_entucky'

#Selects all variable names from a specific table that should meet the criteria of having Kentucky as the state and Blunt Object as the weapon - if there were any additional
#variations on the names it would be a good idea to use wildcards here
SELECT *
FROM murderstats1st
WHERE state = 'Kentucky'
	AND weapon = 'Blunt Object';


#Selects all variable names from a specific table that should meet the criteria of having Kentucky or Montana as the listed state
SELECT *
FROM murderstats1st
WHERE state = 'Kentucky'
	OR state = 'Montana'
	
#Selects all variable names from a specific table that should meet the criteria of having Kentycky as the state and a victim whose age is under(and not including)
#15 or over(and not including) 90 but sorts the age in descending order
SELECT *
FROM murderstats1st
WHERE state = 'Kentucky'
	AND (victimage < 15 OR victimage > 90)
ORDER BY victimage DESC;


#Demonstrates the importance of choosing the correct type for spacing/processing/efficiency
CREATE TABLE char_data_types(
	varchar_column varchar(10),
	char_column char(10),
	text_column text);
	
	
	
INSERT INTO char_data_types
VALUES
	('abc', 'abc', 'abc'),
	('defghi', 'defghi', 'defghi');
	
	
COPY char_data_types TO 'C:\Users\Public\typetest.txt'
WITH (FORMAT CSV, HEADER, DELIMITER '|');

#Demonsrates the importance of choosing the correct type for spacing/processing/efficiency and accuracy with numerical data
CREATE TABLE number_data_types (
	numeric_column numeric(20,5),
	real_column real,
	double_column double precision);
	
INSERT INTO number_data_types
VALUES
	(.7, .7, .7),
	(2.13579, 2.13579, 2.13579),
	(2.1367987654, 2.1367987654, 2.1367987654);
	
SELECT * FROM number_data_types;


#Demonstrates the different ways dates can be displayed
CREATE TABLE date_time_types (
	timestamp_column timestamp with time zone,
	interval_column interval);


INSERT INTO date_time_types
VALUES
	('2018-12-31 01:00 EST', '2 days'),
	('2018-12-31 01:00 -8', '1 month'),
	('2018-12-31 01:00 Australia/Melbourne', '1 century'),
	(now(), '1 week');
	
SELECT * FROM date_time_types;


#Demonstrates how to utilize already created date columns to create a new date column
SELECT 
	timestamp_column,
	interval_column,
	timestamp_column - interval_column AS new_date
FROM date_time_types;


#Demonstrates how to change column data types to different data types, the last one causes an error because you cannot change letters into numbers but you CAN change numbers
#into string/text
SELECT timestamp_column, CAST(timestamp_column AS varchar(10))
FROM date_time_types;

SELECT numeric_column,
	CAST(numeric_column AS integer),
	CAST(numeric_column AS varchar(6))

FROM number_data_types;

SELECT CAST(char_column AS integer) FROM char_data_types;


#Creates a table and then demonstrates how to load in a .csv file
CREATE TABLE testingcopy(
	variable_name varchar(75),
	first_number int,
	second_number int);


#Demonstrates how to import a .csv file into an already made database table - it must be created with the correct data types for the import to work
COPY us_counties_2010
FROM 'C:\Users\Public\us_counties_2010.csv'
WITH (FORMAT CSV,HEADER);


#Allows you to copy in information from a file if you only have certain attriubtes or columns
COPY supervisor_salaries (town, supervisor, salary)
FROM 'C:\Users\Public\supervisor_salaries.csv'
WITH (FORMAT CSV, HEADER);


#Allows you to fill in missing data when importing by using a temporary table
CREATE TEMPORARY TABLE supervisor_salaries_temp (LIKE supervisor_salaries);

COPY supervisor_salaries_temp (town, supervisor, salary)
FROM 'C:\Users\Public\supervisor_salaries.csv'
WITH (FORMAT CSV, HEADER);

INSERT INTO supervisor_salaries (town, county, supervisor, salary)
SELECT town, 'Some County', supervisor, salary
FROM supervisor_salaries_temp;


DROP TABLE supervisor_salaries_temp;

SELECT * FROM supervisor_salaries;


#Writes your table to a file with specifically chosen columns
COPY us_counties_2010 (geo_name, internal_point_lat, internal_point_lon) 
TO 'C:\Users\Public\counties_lat_long.txt'
WITH (FORMAT CSV, HEADER, DELIMITER '|');

#You can save query results to a txt file
COPY (

	SELECT geo_name, state_us_abbreviation
	FROM us_counties_2010
	WHERE geo_name ILIKE '%mill%'
)

TO 'C:\Users\Public\millcou.txt'
WITH (FORMAT CSV, HEADER, DELIMITER '|');

#Demonstrates selecting table columns and renaming them AS something easier to work with
SELECT geo_name,
	state_us_abbreviation AS "st",
	p0010001 AS "Total Population",
	p0010003 AS "White Alone",
	p0010004 AS "Black or African American Alone",
	p0010005 AS "Am Indian/Alaska Native Alone",
	p0010006 AS "Asian Alone",
	p0010007 AS "Native Hawaiian Alone",
	p0010008 AS "Some Other Alone",
	p0010009 AS "Two or More"
FROM us_Counties_2010;

#Demonstrates selecting the table columns as aliases and adds a new column with the first two added together
SELECT geo_name,
		state_us_abbreviation AS "st",
		p0010003 AS "White Alone",
		p0010004 AS "Black Alone",
		p0010003 + p0010004 AS "Total White and Black"
FROM us_Counties_2010;


#Demonstrates selecting table columns and performing addition and subtraction
SELECT geo_name,
	state_us_abbreviation AS "st",
	p0010001 AS "Total",
	p0010003 + p0010004 + p0010005 + p0010006 + p0010007, + p0010008 + p0010009 AS "All Races",
	(p0010003 + p0010004 + p0010005 + p0010006 + p0010007 + p0010008 + p0010009) - p0010001 AS "Difference"

FROM us_counties_2010
ORDER BY "Difference" DESC;


#Demonstrates using percentages - a note here, you will want to put in some sort of rounding designation so you don't get so many places returned back
SELECT geo_name,
	state_us_abbreviation AS "st",
	(CAST (p0010006 AS numeric(8,1)) / p0010001) * 100 AS "pct_asian"
FROM us_counties_2010
ORDER BY "pct_asian" DESC;

#Demonstrates calculating a percentage
SELECT department, spend_2014, spend_2017,
		round( (spend_2017 - spend_2014) / spend_2014 * 100, 1) AS "pct change"
FROM percent_change;



#Demonstrates continuous and discrete percentile statements
CREATE TABLE percentile_test (
	numbers integer);

INSERT INTO percentile_test (numbers) VALUES (1), (2), (3), (4), (5), (6);

SELECT
	percentile_cont(.5)
	WITHIN GROUP (ORDER BY numbers),
	percentile_disc(.5)
	WITHIN GROUP (ORDER BY numbers)
FROM percentile_test;

#Demonstrates using an array of values 
SELECT percentile_cont(array[.25,.5,.75])
	WITHIN GROUP (ORDER BY p0010001) AS "quartiles"
FROM us_counties_2010;


#Demonstrates how to unnest information in an array
SELECT unnest(
	percentile_cont(array[.25,.5,.75])
	WITHIN GROUP (ORDER BY p0010001)
	) AS "quartiles"
FROM us_counties_2010;


#Demonstrates how SQL can be used to create functions, this one is a median() function 
CREATE OR REPLACE FUNCTION _final_median(anyarray)
	RETURNS float8 AS
$$
 WITH q AS
 (
 	SELECT val
 	FROM unnest($1) val
 	WHERE VAL IS NOT NULL
 	ORDER BY 1
 ),
 cnt AS
 (
 	SELECT COUNT(*) AS c FROM q
 )
 SELECT AVG(val)::float8
 FROM
 (
 	SELECT val FROM q
 	LIMIT 2 - MOD((SELECT c FROM cnt), 2)
 	OFFSET GREATEST(CEIL((SELECT c FROM cnt) / 2.0) - 1,0)
 ) q2;
 $$
 LANGUAGE sql IMMUTABLE;
 
 CREATE AGGREGATE median(anyelement) (
 	SFUNC=array_append,
 	STYPE=anyarray,
 	FINALFUNC=_final_median,
 	INITCOND='{}'
 );

#Demonstrates how to use the above function
SELECT sum(p0010001) AS "County Sum",
	round(avg(p0010001), 0) AS "County Average",
	median(p0010001) AS "County Median",
	percentile_cont(.5)
	WITHIN GROUP (ORDER BY p0010001) AS "50th Percentile"
FROM us_counties_2010;

~~
UNIQUE Constraint − Ensures that all values in a column are different
NOT NULL Constraint − Ensures that a column cannot have NULL value
PRIMARY Key − Uniquely identifies each row/record in a database table
FOREIGN Key − Constrains data based on columns in other tables
CHECK Constraint − The CHECK constraint ensures that all values in a column satisfy certain conditions
EXCLUSION Constraint − The EXCLUDE constraint ensures that if any two rows are compared on the specified column(s) or expression(s) using the specified operator(s), not all of these comparisons will return TRUE
~~
#Demonstrates the need and use of constraining information that goes into databases to avoid duplicate entries
CREATE TABLE departments (
	dept_id bigserial,
	dept varchar(100),
	city varchar(100),
	CONSTRAINT dept_key PRIMARY KEY (dept_id),
	CONSTRAINT dept_city_unique UNIQUE (dept, city)
);

CREATE TABLE employees(
	emp_id bigserial,
	first_name varchar(100),
	last_name varchar(100),
	salary integer,
	dept_id integer REFERENCES departments (dept_id),
	CONSTRAINT emp_key PRIMARY KEY (emp_id),
	CONSTRAINT emp_dept_unique UNIQUE (emp_id, dept_id)
);



#Demonstrates joining two tables together and limiting them to 5 because a general join brings back ALL information from both tables
	
SELECT * 
FROM murderstats1st m1 JOIN murderstats2nd m2
ON m1.agencycode = m2.agencycode
LIMIT 5;

~~~
Works for:
	If you want your results to contain all of the rows from 1 of the tables
	If you want to look for missing values in one of the tables
	When you know some rows won't have matching values
#Demonstrates LEFT JOIN and RIGHT JOIN
SELECT *
FROM murderstats1st m1 LEFT JOIN murderstats2nd m2
ON m1.agencycode = m2.agencycode
LIMIT 5;

SELECT *
FROM murderstats1st m1 RIGHT JOIN murderstats2nd m2
ON m1.perpetratorage = m2.perpetratorage
LIMIT 30;

--FULL OUTER JOIN gives results from every row in the left table including matching rows and blanks in the right tablefollowed by any left over missing rows from the right table
~~Useful for merging 2 data sources that partially overlap
~~ or to viszualize the degree to which the tables share matching data

#Demonstrates joining tables to find NULL values
SELECT * 
FROM schools_left sl LEFT JOIN schools_right sr
ON sl.id = sr.id
WHERE sr.id IS NULL;


#Demonstrates selecting certain columns from certain tables, utilizing a join and limiting the results
SELECT m1.victimage, m2.victimage, m2.state
FROM murderstats1st m1 LEFT JOIN murderstats2nd m2
ON m1.agencycode = m2.agencycode
LIMIT 25;

#Demonstrates selecting certain columns from multiple tables, utilizing a join and limiting the results
SELECT lt.state, lt.year, mt.state, rt.state
FROM murder1980 AS lt LEFT JOIN murderstats1st as mt
ON lt.state = mt.state
LEFT JOIN murderstats2nd as rt
ON lt.state = rt.state
LIMIT 5;

