Postgres Database Setup

CREATE TABLE murderStats1st (
	RecordID bigserial,
	AgencyCode varchar(25),
	AgencyName varchar(50),
	AgencyType varchar(50),
	City varchar(50),
	State varchar(50),
	Year date,
	Month varchar(50),
	Incident int,
	CrimeType varchar(75),
	CrimeSolved varchar(50),
	VictimSex varchar(50),
	VictimAge int,
	VictimRace varchar(75),
	VictimEthnicity varchar(50),
	PerpetratorSex varchar(50),
	PerpetratorAge int,
	PerpetratorRace varchar(75),
	PerpetratorEthnicity varchar(50),
	Relationship varchar(50),
	Weapon	varchar(75),
	VictimCount int,
	PerpetratorCount int,
	RecordSource varchar(50)
	);
  
  
  
    
  
  CREATE TABLE murderStats2nd (
	RecordID bigserial,
	AgencyCode varchar(25),
	AgencyName varchar(50),
	AgencyType varchar(50),
	City varchar(50),
	State varchar(50),
	Year date,
	Month varchar(50),
	Incident int,
	CrimeType varchar(75),
	CrimeSolved varchar(50),
	VictimSex varchar(50),
	VictimAge int,
	VictimRace varchar(75),
	VictimEthnicity varchar(50),
	PerpetratorSex varchar(50),
	PerpetratorAge int,
	PerpetratorRace varchar(75),
	PerpetratorEthnicity varchar(50),
	Relationship varchar(50),
	Weapon	varchar(75),
	VictimCount int,
	PerpetratorCount int,
	RecordSource varchar(50)
	);
  
  --- Split up information from the murder stats into two to practice joining
  
  ###
ALTER TABLE murderstats
ALTER COLUMN year TYPE text;
##
ALTER TABLE murderstats
ALTER COLUMN year TYPE int USING year::integer;
##
ALTER TABLE murderstats
ALTER COLUMN agencytype TYPE varchar (200);
##
ALTER TABLE murderstats
ALTER COLUMN agencyname TYPE varchar (200);


---Notes---

~~ Order of operations for PGAdmin
Punctuation - quoates, parenteses, math operators
Numbers
Punctuation - ? and additional
Capital Letters
Punctuation - brackets, underscore
Lowercase letters
Punctuation - special characters, extended alphabet

~~ Operators
=
<> !=
>
<
>=
<=
BETWEEN
IS
LIKE - pattern (case sensitive)
ILIKE - pattern (not case sensitive)
NOT

**Probably want to create some statements utilizing at least the last 4/5 to show knowledge and ability to use

--- Commands ---
#Selects all information from the table murderstats2nd
SELECT * FROM murderstats2nd;

#Selects only the columns state, year, crimetype and crimesolved from table murderstats2nd
SELECT state, year, crimetype, crimesolved FROM murderstats2nd;

#Selects the state, crime type and crimesolved columns from a specific table and orders state by descending order and vrimesolved by ascending order
SELECT state, crimetype, crimesolved
FROM murderstats1st
ORDER BY state DESC, crimesolved ASC;

#Selects the perpetrator sex, perpetratorrace and relationshup from a specific table where a specific critera for state is met
SELECT perpetratorsex, perpetratorrace, relationship
FROM murderstats1st
WHERE state = 'Wyoming';

#Selects a few variables from a specific table and uses the LIKE operator to search for states that contain certain criteria 
SELECT perpetratorsex, perpetratorrace, relationship, state
FROM murderstats1st
WHERE state LIKE 'M%'

SELECT perpetratorsex, perpetratorrace, relationship, state
FROM murderstats1st
WHERE state LIKE '%nt%'

SELECT perpetratorsex, perpetratorrace, relationship, state
FROM murderstats1st
WHERE state LIKE '_entucky'

#Selects all variable names from a specific table that should meet the criteria of having Kentucky as the state and Blunt Object as the weapon - if there were any additional
#variations on the names it would be a good idea to use wildcards here
SELECT *
FROM murderstats1st
WHERE state = 'Kentucky'
	AND weapon = 'Blunt Object';


#Selects all variable names from a specific table that should meet the criteria of having Kentucky or Montana as the listed state
SELECT *
FROM murderstats1st
WHERE state = 'Kentucky'
	OR state = 'Montana'
	
#Selects all variable names from a specific table that should meet the criteria of having Kentycky as the state and a victim whose age is under(and not including)
#15 or over(and not including) 90 but sorts the age in descending order
SELECT *
FROM murderstats1st
WHERE state = 'Kentucky'
	AND (victimage < 15 OR victimage > 90)
ORDER BY victimage DESC;
